
@page "/frivillig"
@using MiljøFestivalv2.Shared
@using System.Net.Http.Json
@using Client.Services
@using System
@inject HttpClient Http
@inject GlobalState GlobalState
@inject NavigationManager NavManager

<link rel="stylesheet" type="text/css" href="Frivillig.razor.css">
<h3>Velkommen, @GlobalState.bruger.brugernavn</h3>
<div>
	<h1>Dine optjente point @GlobalState.bruger.dine_point</h1>
	<button class="btnTop" onclick="@RedirectBelønning">Gå til belønninger</button>
</div>
<div>
	<button class="btnTop" onclick="@SkiftBrugerInfo">Opdater information</button>
</div>

@if (GlobalState.bruger == null)
{
	<img src="Images/loading.gif" class="GIF">
}
else
{
	<!-- Printer alle Beskeder ud-->
	<div class="Besked-oversigt">
		<h1 class="mb-3 mt-3">Beskeder</h1>
		<table class="table table-striped">
			<thead>
				<tr>
					<th>Besked</th>
					<th>Afsender</th>
					<th>Tidspunkt</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var Besked in BeskedListe)
				{
					<tr>
						<td>@Besked.Besked</td>
						<td>@Besked.Afsender</td>
						<td>@Besked.FjernSekunderBesked().ToString("yyyy-MM-dd HH:mm")</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	// laver mellemrum
	<br />
	<br />
	<br />
	
	// printer alle vagter samt book knap
<div class="Diverne">
	<h1 class="mb-3 mt-3">Alle Vagter</h1>
	<table class="table table-striped">
		<thead>
			<tr>

				<th>Område</th>
				<th>Antal Personer</th>
				<th>Beskrivelse</th>
				<th>Start Tid</th>
				<th>Slut tid</th>
				<th>Prioritering</th>
				<th>Point</th>
				<th>&zwnj;</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var vagt in VagtListe)
			{
				<tr>
					<td>@vagt.område</td>
					<td>@vagt.antal_personer</td>
					<td>@vagt.beskrivelse</td>
					<td>@vagt.FjernSekunderStart().ToString("yyyy-MM-dd HH:mm")</td>
					<td>@vagt.FjernSekunderSlut().ToString("yyyy-MM-dd HH:mm")</td>
					<td>@vagt.priotering</td>
					<td>@vagt.point</td>
					@if (vagt.antal_personer > 0 && !ErVagtBooket(vagt.vagt_id))
					{
						<td>
							<button class="btnBook" @onclick="(() => BookVagt(vagt.vagt_id))">Book vagt</button>
						</td>
					}
					else if (vagt.antal_personer > 0)
					{
						<td>
							<button class="btnDisabled" disabled="disabled">Allerede booket</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
</div>
	<br />
	<br />

	<!--// printer alle personlige bookinger ud-->
	<div class="Diverne1">
	<h1 class="mb-3 mt-3">Dine bookinger</h1>

	<table class="table table-striped">
		<thead>
			<tr>

				<th>Område</th>
				<th>Beskrivelse</th>
				<th>Start Tid</th>
				<th>Slut tid</th>
				<th>Prioritering</th>
				<th>Vagt id</th>
				<th>Point</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in BookingListe)
			{
				<tr>
					<td>@booking.område</td>
					<td>@booking.beskrivelse</td>
					<td>@booking.FjernSekunderStart().ToString("yyyy-MM-dd HH:mm")</td>
					<td>@booking.FjernSekunderSlut().ToString("yyyy-MM-dd HH:mm")</td>
					<td>@booking.priotering</td>
					<td>@booking.vagt_id</td>
					<td>@booking.point</td>
					@if (!booking.er_låst)
					{
						<td>
							<button class="btn btn-danger" @onclick="() => SletBooking(booking.booking_id)">Slet Booking</button>
						</td>
					}
					else
					{
						<td>
							<button class="btn btn-dark" style="background-color: grey" disabled="disabled" @onclick="() => SletBooking(booking.booking_id)">Booking er låst</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
</div>

}
@code {
    // Laver en liste med datamodel klasserne fra shared
    public List<Vagt> VagtListe = new List<Vagt>();
    public List<Booking> BookingListe = new List<Booking>();
    public List<Msg_board> BeskedListe = new List<Msg_board>();

    // Injecter interfaces fra services så deres tilknyttede metoder kan bruges
    [Inject]
    public IVagtService ServiceVagt { get; set; }
    [Inject]
    public IBookingService ServiceBooking { get; set; }
    [Inject]
    public IMessageService ServiceMessage { get; set; }
    [Inject]
    public IBrugerService ServiceBruger { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var BrugerId = GlobalState.bruger.bruger_id;
        BookingListe = (await ServiceBooking.HentBookingerForBruger(BrugerId)).ToList();
        VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();

        BeskedListe = (await ServiceMessage.HentAlleBeskeder()).ToList();
    }

    private void SkiftBrugerInfo()
    {
        var BrugerId = GlobalState.bruger.bruger_id;
        NavManager.NavigateTo($"/personinfo/{BrugerId}");
    }

	private void RedirectBelønning()
	{
		NavManager.NavigateTo($"/belønninger");
	}

	private async Task BookVagt(int VagtId)
	{

        // Tjekker først om brugeren allerede har booket vagten.
        if (ErVagtBooket(VagtId))
        {
            Console.WriteLine("Du har allerede booket denne vagt.");
            return;
        }

        var Booking = new BookingSql
        {
            bruger_id = GlobalState.bruger.bruger_id,
            vagt_id = VagtId
        };

        try
        {
            await ServiceBooking.OpretBooking(Booking);

            // Opdaterer bookinglisten efter en vellykket booking
            BookingListe = (await ServiceBooking.HentBookingerForBruger(GlobalState.bruger.bruger_id)).ToList();
            VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
			GlobalState.bruger = await ServiceBruger.HentBrugerSingle(GlobalState.bruger.bruger_id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Hvis der sker fejl i try printes en exception message i konsollen
            Console.WriteLine("Fejl ved booking: " + ex.Message);
        }
    }

    private bool ErVagtBooket(int VagtId)
    {
        // tjekker om bookinglisten indeholder en vagt med samme vagtid
        return BookingListe.Any(Booking => Booking.vagt_id == VagtId);
    }

    private async Task SletBooking(int BookingId)
    {
        await ServiceBooking.SletBooking(BookingId);
        BookingListe = (await ServiceBooking.HentBookingerForBruger(GlobalState.bruger.bruger_id)).ToList();
        VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
		GlobalState.bruger = await ServiceBruger.HentBrugerSingle(GlobalState.bruger.bruger_id);
        StateHasChanged();
    }


}


